-- Utility function to handle errors and continue execution
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("Error occurred: " .. result)
    end
    return success, result
end

-- Check if the ScreenGui already exists
safeCall(function()
    local existingGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("BlairScreenGui")
    if existingGui then
        existingGui:Destroy() -- Destroy the existing GUI to prevent duplication
    end
end)

-- Creating a new ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BlairScreenGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Creating the scrolling frame for Blair GUI
local mainFrame = Instance.new("ScrollingFrame")
mainFrame.Name = "MainFrame"
mainFrame.Parent = screenGui
mainFrame.AnchorPoint = Vector2.new(0, 0.5)
mainFrame.Position = UDim2.new(0, 0, 0.5, 0)
mainFrame.Size = UDim2.new(0.25, 0, 0.25, 0) -- 1/4 of the screen
mainFrame.CanvasSize = UDim2.new(0, 0, 1.5, 0) -- Adjust this for scrolling
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false -- Start hidden until toggle is pressed
mainFrame.ScrollBarThickness = 8

-- Adding a title to Blair GUI
local titleLabel = Instance.new("TextLabel")
titleLabel.Parent = mainFrame
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.Size = UDim2.new(1, 0, 0, 50)
titleLabel.BackgroundTransparency = 1
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.Text = "Blair GUI"
titleLabel.TextSize = 24
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)

-- Function to create buttons
local function createButton(name, text, callback)
    safeCall(function()
        local button = Instance.new("TextButton")
        button.Name = name
        button.Parent = mainFrame
        button.Size = UDim2.new(0.8, 0, 0, 40) -- Reduced button size
        button.Position = UDim2.new(0.1, 0, 0, 60 + (#mainFrame:GetChildren() - 2) * 50)
        button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        button.BorderSizePixel = 0
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Font = Enum.Font.SourceSans
        button.TextSize = 16 -- Reduced text size
        button.Text = text
        button.MouseButton1Click:Connect(callback)
    end)
end

-- Toggle button to show/hide Blair GUI
safeCall(function()
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleBlairGUIButton"
    toggleButton.Parent = screenGui
    toggleButton.Size = UDim2.new(0, 100, 0, 50)
    toggleButton.Position = UDim2.new(0, 10, 0, 10)
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 128, 255)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.SourceSansBold
    toggleButton.TextSize = 18
    toggleButton.Text = "Toggle GUI"

    toggleButton.MouseButton1Click:Connect(function()
        mainFrame.Visible = not mainFrame.Visible
    end)
end)

-- Creating the Sanity Check Frame
safeCall(function()
    local sanityFrame = Instance.new("Frame")
    sanityFrame.Name = "SanityFrame"
    sanityFrame.Parent = screenGui
    sanityFrame.AnchorPoint = Vector2.new(0.5, 0)
    sanityFrame.Position = UDim2.new(0.5, 0, 0, 10) -- Positioned at the middle top of the screen
    sanityFrame.Size = UDim2.new(0, 200, 0, 50)
    sanityFrame.BackgroundTransparency = 1 -- Transparent frame
    sanityFrame.BorderSizePixel = 0

    -- Adding Sanity Text
    local sanityLabel = Instance.new("TextLabel")
    sanityLabel.Parent = sanityFrame
    sanityLabel.Size = UDim2.new(1, 0, 1, 0)
    sanityLabel.BackgroundTransparency = 1
    sanityLabel.Font = Enum.Font.SourceSansBold
    sanityLabel.TextSize = 20
    sanityLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    sanityLabel.Text = "Sanity: Loading..."
    sanityLabel.TextStrokeTransparency = 0.5

    -- Function to update Sanity Text continuously
    local player = game:GetService("Players").LocalPlayer
    local sanity = player:WaitForChild("Sanity", 5)
    if sanity then
        sanity:GetPropertyChangedSignal("Value"):Connect(function()
            sanityLabel.Text = "Sanity: " .. sanity.Value
        end)
    else
        sanityLabel.Text = "Sanity: N/A"
    end
end)

-- Function to add billboards to objects
local function trackObject(object, text, color)
    safeCall(function()
        if not object:FindFirstChild(text) then
            local billboard = Instance.new("BillboardGui")
            billboard.Adornee = object
            billboard.Name = text
            billboard.Size = UDim2.new(0, 100, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true
            billboard.Parent = object

            local textLabel = Instance.new("TextLabel")
            textLabel.Parent = billboard
            textLabel.BackgroundTransparency = 1
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextSize = 14
            textLabel.TextColor3 = color
            textLabel.TextStrokeTransparency = 0
            textLabel.TextYAlignment = Enum.TextYAlignment.Center
            textLabel.Text = text
            textLabel.ZIndex = 10
        end
    end)
end

-- Function to continuously track objects and ensure billboards remain intact
local function continuousTrack(objectContainer, objectName, displayName, color)
    safeCall(function()
        while true do
            if objectContainer and objectContainer:FindFirstChild(objectName) then
                for _, obj in pairs(objectContainer:GetChildren()) do
                    if obj.Name == objectName then
                        trackObject(obj, displayName, color)
                    end
                end
            end
            wait(1) -- Check every 1 second to ensure billboards stay intact
        end
    end)
end

-- Check for Crused Items before proceeding
local function checkCrusedItems()
    local crusedItems = {}
    local crusedItemObjects = {}

    safeCall(function()
        local ouijaBoard = game:GetService("Workspace"):FindFirstChild("Ouija Board")
        if ouijaBoard then
            table.insert(crusedItems, "Ouija Board")
            crusedItemObjects["Ouija Board"] = ouijaBoard
        end

        local summoningCircle = game:GetService("Workspace"):FindFirstChild("SummoningCircle")
        if summoningCircle then
            table.insert(crusedItems, "Summoning Circle")
            crusedItemObjects["Summoning Circle"] = summoningCircle
        end

        local tarotCards = game:GetService("Workspace").Map.Items:FindFirstChild("Tarot Cards")
        if tarotCards then
            local tarotCardHandle = tarotCards:FindFirstChild("Handle")
            if tarotCardHandle then
                table.insert(crusedItems, "Tarot Cards")
                crusedItemObjects["Tarot Cards"] = tarotCardHandle
            end
        end
    end)

    return crusedItems, crusedItemObjects
end

local crusedItems, crusedItemObjects = checkCrusedItems()

safeCall(function()
    if #crusedItems == 0 then
        game.StarterGui:SetCore("SendNotification", {
            Title = "No Crused Items",
            Text = "No Crused Items found in the game.",
            Duration = 3
        })
    else
        game.StarterGui:SetCore("SendNotification", {
            Title = "Crused Items Found",
            Text = "Found: " .. table.concat(crusedItems, ", "),
            Duration = 3
        })

        -- Add billboards and teleport buttons for each found Crused Item
        for itemName, itemObject in pairs(crusedItemObjects) do
            local color = itemName == "Ouija Board" and Color3.fromRGB(0, 128, 0) or (itemName == "Summoning Circle" and Color3.fromRGB(255, 140, 0) or Color3.fromRGB(128, 0, 128))
            trackObject(itemObject, itemName, color)
            
            createButton("TpTo" .. itemName, "Teleport to " .. itemName, function()
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = itemObject.CFrame
            end)
        end
    end
end)

-- Continue with the rest of the script even if no Crused Items are found
-- Set up lighting and other environmental effects
safeCall(function()
    game:GetService("Lighting").Brightness = 2
    game:GetService("Lighting").ClockTime = 0
    game:GetService("Lighting").FogEnd = 100000
    game:GetService("Lighting").GlobalShadows = false
    game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(128, 128, 128)
end)

local map = safeCall(function() return workspace:FindFirstChild("Map") end)

if map then
    -- Track Generators
    continuousTrack(map.Generators, "GeneratorMesh", "Generator", Color3.fromRGB(255, 0, 0))

    -- Track Van
    continuousTrack(map.Van, "SpawnLocation", "Van", Color3.fromRGB(255, 20, 147))

    -- Track Orbs
    continuousTrack(map.Orbs, "OrbPart", "Orb", Color3.fromRGB(30, 144, 255))

    -- Track Prints
    continuousTrack(map.Prints, "UV_Hand", "Fingerprint", Color3.fromRGB(75, 0, 130))

    -- Adding teleport buttons for Generator and Van
    createButton("TpToGenerator", "Teleport to Generator", function()
        safeCall(function()
            local generator = map.Generators:FindFirstChild("GeneratorMesh")
            if generator then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = generator.CFrame
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Error",
                    Text = "Generator not found",
                    Duration = 2
                })
            end
        end)
    end)

    createButton("TpToVan", "Teleport to Van", function()
        safeCall(function()
            local van = map.Van:FindFirstChild("SpawnLocation")
            if van then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = van.CFrame
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Error",
                    Text = "Van not found",
                    Duration = 2
                })
            end
        end)
    end)
else
    warn("Map not found in Workspace.")
end

-- Instant Proximity Prompt Script (runs immediately)
safeCall(function()
    game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
        fireproximityprompt(prompt)
    end)
end)

print("hellow")
